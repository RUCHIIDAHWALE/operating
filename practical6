#include <stdio.h>
#include <stdlib.h>

#define MAX_PAGES 100
#define MAX_FRAMES 10

void printFrames(int frames[], int frameCount) {
    for (int i = 0; i < frameCount; i++) {
        if (frames[i] != -1) {
            printf("%d ", frames[i]);
        } else {
            printf("- ");
        }
    }
    printf("\n");
}

// FCFS Page Replacement
void fcfs(int pages[], int pageCount, int frameCount) {
    int frames[MAX_FRAMES];
    int index = 0;
    int pageFaults = 0;

    for (int i = 0; i < frameCount; i++) {
        frames[i] = -1; // Initialize frames
    }

    for (int i = 0; i < pageCount; i++) {
        int found = 0;
        for (int j = 0; j < frameCount; j++) {
            if (frames[j] == pages[i]) {
                found = 1;
                break;
            }
        }

        if (!found) {
            frames[index] = pages[i];
            index = (index + 1) % frameCount; // Move to next frame
            pageFaults++;
        }

        printf("After page %d: ", pages[i]);
        printFrames(frames, frameCount);
    }

    printf("Total page faults (FCFS): %d\n", pageFaults);
}

// LRU Page Replacement
void lru(int pages[], int pageCount, int frameCount) {
    int frames[MAX_FRAMES];
    int lastUsed[MAX_FRAMES];
    int pageFaults = 0, time = 0;

    for (int i = 0; i < frameCount; i++) {
        frames[i] = -1; // Initialize frames
        lastUsed[i] = -1; // Initialize last used
    }

    for (int i = 0; i < pageCount; i++) {
        int found = 0;
        for (int j = 0; j < frameCount; j++) {
            if (frames[j] == pages[i]) {
                found = 1;
                lastUsed[j] = time++;
                break;
            }
        }

        if (!found) {
            int lruIndex = 0;
            for (int j = 1; j < frameCount; j++) {
                if (lastUsed[j] < lastUsed[lruIndex]) {
                    lruIndex = j; // Find least recently used
                }
            }
            frames[lruIndex] = pages[i];
            lastUsed[lruIndex] = time++;
            pageFaults++;
        }

        printf("After page %d: ", pages[i]);
        printFrames(frames, frameCount);
    }

    printf("Total page faults (LRU): %d\n", pageFaults);
}

// Optimal Page Replacement
void optimal(int pages[], int pageCount, int frameCount) {
    int frames[MAX_FRAMES];
    int pageFaults = 0;

    for (int i = 0; i < frameCount; i++) {
        frames[i] = -1; // Initialize frames
    }

    for (int i = 0; i < pageCount; i++) {
        int found = 0;
        for (int j = 0; j < frameCount; j++) {
            if (frames[j] == pages[i]) {
                found = 1;
                break;
            }
        }

        if (!found) {
            int replaceIndex = -1;
            int farthest = -1;

            // Find the frame to replace using the optimal strategy
            for (int j = 0; j < frameCount; j++) {
                int nextUse = -1;
                for (int k = i + 1; k < pageCount; k++) {
                    if (frames[j] == pages[k]) {
                        nextUse = k;
                        break;
                    }
                }
                if (nextUse == -1) {
                    replaceIndex = j; // Found an empty slot
                    break;
                } else if (nextUse > farthest) {
                    farthest = nextUse;
                    replaceIndex = j;
                }
            }

            frames[replaceIndex] = pages[i];
            pageFaults++;
        }

        printf("After page %d: ", pages[i]);
        printFrames(frames, frameCount);
    }

    printf("Total page faults (Optimal): %d\n", pageFaults);
}

int main() {
    int pages[MAX_PAGES], pageCount, frameCount;

    // Sample input for pages
    printf("Enter the number of pages: ");
    scanf("%d", &pageCount);
    printf("Enter the page numbers:\n");
    for (int i = 0; i < pageCount; i++) {
        scanf("%d", &pages[i]);
    }

    do {
        printf("Enter the number of frames (minimum 3): ");
        scanf("%d", &frameCount);
    } while (frameCount < 3);

    printf("\nFCFS Page Replacement:\n");
    fcfs(pages, pageCount, frameCount);
    
    printf("\nLRU Page Replacement:\n");
    lru(pages, pageCount, frameCount);
    
    printf("\nOptimal Page Replacement:\n");
    optimal(pages, pageCount, frameCount);

    return 0;
}






//gcc  pract6.c -o pract6
//./pract6

//no. of pages= 7
// page no.=
//2
//3
//4
//5
//6
//4
//9

//no. of frames=3 

//O/p----all page faults=6
