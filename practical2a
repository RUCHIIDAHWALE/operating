#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

#define MAX_NUMBERS 100

void bubble_sort(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

void print_array(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int numbers[MAX_NUMBERS];
    int n, status;
    pid_t pid;

    // Input the number of integers to be sorted
    printf("Enter number of integers to sort: ");
    scanf("%d", &n);
    
    // Input the integers
    printf("Enter %d integers:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &numbers[i]);
    }

    // Fork a new process
    pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    } else if (pid == 0) { // Child process
        // Introduce a zombie state for demonstration
        printf("Child process (PID: %d) created. Sorting in child...\n", getpid());

        // Simulate sorting in child process
        bubble_sort(numbers, n);
        
        printf("Child sorted numbers: ");
        print_array(numbers, n);

        // Exit the child process without waiting for parent
        exit(EXIT_SUCCESS);
    } else { // Parent process
        // Parent sorting
        printf("Parent process (PID: %d) created. Sorting in parent...\n", getpid());

        // Sort the integers in the parent process
        bubble_sort(numbers, n);
        
        printf("Parent sorted numbers: ");
        print_array(numbers, n);
        
        // Wait for child process to finish
        waitpid(pid, &status, 0);
        
        // Check if child terminated normally
        if (WIFEXITED(status)) {
            printf("Child terminated normally with exit status: %d\n", WEXITSTATUS(status));
        }

        // Uncomment the line below to demonstrate orphan process
        // sleep(10);
        
        // Print message about orphan state
        printf("If the parent exits now, the child process will become an orphan.\n");
    }

    return 0;
}




///processcontrol///

//gcc -o pract2a pract2a.c
//./pract2a

//no. of integer= 5
//3 1 4 5 2 
//O?P = 12345

